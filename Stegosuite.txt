Other software for steganograpgh is deep sound (for audio) on windows.
The stegosuite is linux tool for hidding text/file into picture.

┌──(kali㉿SF)-[~]
└─$ sudo apt install stegosuite
sudo: unable to resolve host SF: Name or service not known
[sudo] password for kali: 
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
stegosuite is already the newest version (0.9.0-1).
0 upgraded, 0 newly installed, 0 to remove and 1563 not upgraded.

┌──(kali㉿puppet)-[~]
└─$ stegosuite                 
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Steganography tool to hide information in image files

Usage: stegosuite [-hV] [COMMAND]

Options:
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.

Commands:
  help      Displays help information about the specified command
  gui       Starts the GUI
  embed     Embeds data into image
  extract   Extracts data from image
  capacity  Shows the maximum amount of embeddable data

Example:
  stegosuite help embed            Displays help for stegosuite embed
                                                                                 
┌──(kali㉿puppet)-[~]
└─$ stegosuite help embed
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Embeds data into image

Usage: stegosuite embed [-d] [-m=<message>] [-o=<outputPath>] [-f=<file>[,
                        <file>...]]... (-k=<key> | --keyfile=<keyfile>) <image>

Parameters:
      <image>                      Path to the image file to process.

Options:
  -k, --key=<key>                  The secret key used for encryption and hiding.
      --keyfile=<keyfile>          Path to a file which contains the secret key.
                                     Reads its first line.
  -m, --message=<message>          The text message to be embedded into the
                                     image.
  -f, --files=<file>[,<file>...]   Paths to the files to be embedded into the
                                     image.
  -o, --output=<outputPath>        Specifies path to the generated image file.
  -d, --debug                      Shows debug information.

Example:
  stegosuite embed -k my_secret_key -m "My secret message" /path/to/image_file.png


Note: size of original file 467.7 KiB (478,911 bytes)!

┌──(kali㉿puppet)-[~]
└─$ stegosuite embed -k AB0925SF -m "hello world" /home/kali/Desktop/Image.jpg
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Loading jpg image from /home/kali/Desktop/Image.jpg
Embedding data...
Saving jpg image to /home/kali/Desktop/Image_embed.jpg

Note: size of embedded file 381.1 KiB (390,277 bytes)!

┌──(kali㉿puppet)-[~]
└─$ stegosuite help extract                                                   
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Extracts data from image

Usage: stegosuite extract [-d] (-k=<key> | --keyfile=<keyfile>) <image>

Parameters:
      <image>               Path to the image file to process.

Options:
  -k, --key=<key>           The secret key used for encryption and hiding.
      --keyfile=<keyfile>   Path to a file which contains the secret key. Reads
                              its first line.
  -d, --debug               Shows debug information.

Example:
  stegosuite extract -k my_secret_key /path/to/image_file.png


┌──(kali㉿puppet)-[~]
└─$ stegosuite extract -k AB0925SF /home/kali/Desktop/Image_embed.jpg

Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Loading jpg image from /home/kali/Desktop/Image_embed.jpg
Extracting data...
Extracting completed
Extracted message: hello world


Note: Payload is too large. Maximum capacity for this carrier file is 44570 bytes but payload is 579456 bytes.                                   

┌──(kali㉿puppet)-[~]
└─$ stegosuite embed -k AB0925SF -f "/home/kali/Desktop/That File.txt" /home/kali/Desktop/Image.jpg 
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Loading jpg image from /home/kali/Desktop/Image1.jpg
Embedding data...
Saving jpg image to /home/kali/Desktop/Image_embed.jpg

──(kali㉿puppet)-[~]
└─$ stegosuite extract -k AB0925SF /home/kali/Desktop/Image1_embed.jpg
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
Loading jpg image from /home/kali/Desktop/Image1_embed.jpg
Extracting data...
Extracting completed
Extracted file saved to /home/kali/Desktop/That File.txt


┌──(kali㉿puppet)-[~]
└─$ shred --help                                                      
Usage: shred [OPTION]... FILE...
Overwrite the specified FILE(s) repeatedly, in order to make it harder
for even very expensive hardware probing to recover the data.

If FILE is -, shred standard output.

Mandatory arguments to long options are mandatory for short options too.
  -f, --force    change permissions to allow writing if necessary
  -n, --iterations=N  overwrite N times instead of the default (3)
      --random-source=FILE  get random bytes from FILE
  -s, --size=N   shred this many bytes (suffixes like K, M, G accepted)
  -u             deallocate and remove file after overwriting
      --remove[=HOW]  like -u but give control on HOW to delete;  See below
  -v, --verbose  show progress
  -x, --exact    do not round file sizes up to the next full block;
                   this is the default for non-regular files
  -z, --zero     add a final overwrite with zeros to hide shredding
      --help     display this help and exit
      --version  output version information and exit

Delete FILE(s) if --remove (-u) is specified.  The default is not to remove
the files because it is common to operate on device files like /dev/hda,
and those files usually should not be removed.
The optional HOW parameter indicates how to remove a directory entry:
'unlink' => use a standard unlink call.
'wipe' => also first obfuscate bytes in the name.
'wipesync' => also sync each obfuscated byte to disk.
The default mode is 'wipesync', but note it can be expensive.

CAUTION: shred assumes the file system and hardware overwrite data in place.
Although this is common, many platforms operate otherwise.  Also, backups
and mirrors may contain unremovable copies that will let a shredded file
be recovered later.  See the GNU coreutils manual for details.

GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
Full documentation <https://www.gnu.org/software/coreutils/shred>
or available locally via: info '(coreutils) shred invocation'
                                                                            
┌──(kali㉿puppet)-[~]
└─$ shred -f -n 30 -v -z "/home/kali/Desktop/That File.txt"
shred: '/home/kali/Desktop/That File.txt': pass 1/31 (random)...
shred: '/home/kali/Desktop/That File.txt': pass 2/31 (6db6db)...
shred: '/home/kali/Desktop/That File.txt': pass 3/31 (eeeeee)...
shred: '/home/kali/Desktop/That File.txt': pass 31/31 (000000)...


